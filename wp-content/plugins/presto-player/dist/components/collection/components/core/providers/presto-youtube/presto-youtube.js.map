{"version":3,"file":"presto-youtube.js","sourceRoot":"","sources":["../../../../../src/components/core/providers/presto-youtube/presto-youtube.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Event, EventEmitter, Watch, State } from '@stencil/core';\nimport { isIOS } from '../../../../util';\n@Component({\n  tag: 'presto-youtube',\n  styleUrl: 'presto-youtube.css',\n  shadow: false,\n})\nexport class PrestoYoutube {\n  @Prop() src: string;\n  @Prop({ mutable: true }) poster: string;\n  @Prop({ mutable: true }) lazyLoad: boolean;\n  @Prop() player: any;\n  @Prop({ mutable: true }) getRef?: (elm?: HTMLIFrameElement | HTMLVideoElement | HTMLDivElement) => void;\n\n  /**\n   * Events\n   */\n  @Event() reload: EventEmitter<string>;\n\n  /**\n   * State\n   */\n  @State() reloadPlayer: boolean;\n  @State() isWebView: boolean;\n\n  /**\n   * When player is set, do ratio and fixes\n   * @returns\n   */\n  @Watch('player')\n  handlePlayerChange() {\n    if (!this.player) {\n      return;\n    }\n\n    this.fixes();\n    this.setPoster();\n  }\n\n  // fixes issue where youtube can sometimes can be muted if played before load\n  fixes() {\n    this.player.once('statechange', e => {\n      // only playing\n      if (e.detail.code !== 1) {\n        return;\n      }\n      // not autoplay\n      if (e?.detail?.plyr?.config?.blockAttributes?.mutedPreview?.enabled) {\n        return;\n      }\n      // unmute\n      this.player.muted = false;\n    });\n  }\n\n  // get id from youtube url\n  getId(url) {\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = (url || '').match(regExp);\n    return match && match?.[2]?.length === 11 ? match[2] : null;\n  }\n\n  // load player\n  loadPlayer() {\n    this.lazyLoad = false;\n    this.reloadPlayer = true;\n  }\n\n  // wait for component to update before reloading\n  componentDidRender() {\n    if (this.reloadPlayer) {\n      this.reloadPlayer = false;\n      this.reload.emit('play');\n    }\n  }\n\n  /**\n   * detect if we're in a webview browser\n   */\n  setWebView() {\n    // @ts-ignore\n    let standalone = window.navigator?.standalone,\n      userAgent = window.navigator.userAgent.toLowerCase(),\n      safari = /safari/.test(userAgent),\n      ios = /iphone|ipod|ipad/.test(userAgent);\n\n    if (ios) {\n      // ios webview\n      this.isWebView = !standalone && !safari;\n    } else {\n      // android webview\n      this.isWebView = userAgent.includes('wv');\n    }\n  }\n\n  // Load image avoiding xhr/fetch CORS issues. \n  // Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded/\n  loadImage(src, minWidth = 1) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n  \n      const handler = () => {\n        delete image.onload;\n        delete image.onerror;\n        (image.naturalWidth >= minWidth ? resolve : reject)(src);\n      };\n  \n      Object.assign(image, { onload: handler, onerror: handler, src });\n    });\n  }\n\n  setPoster() {\n    if (!this.player.poster) {\n      let posterSrc = (s) => `https://i.ytimg.com/vi/${this.getId(this.src)}/${s}default.jpg`;\n\n      this.loadImage(posterSrc('maxres'), 121) // 480p padded 4:3\n        .catch(() => this.loadImage(posterSrc('sd'), 121)) // 360p padded 4:3. Always exists\n        .catch(() => this.loadImage(posterSrc('hq'), 121)) // 360p padded 4:3. Always exists\n        .then((image:string) => this.player.poster = image )\n        .catch(() => {});\n    }\n  }\n\n  // don't lazy load on iOS\n  componentWillLoad() {\n    this.setWebView();\n    if (this.lazyLoad && isIOS()) {\n      this.lazyLoad = false;\n    }\n  }\n\n  render() {\n    if (this.isWebView) {\n      return (\n        <div class=\"fallback-container\">\n          <iframe src={this.src} allowFullScreen allowtransparency allow=\"autoplay\"></iframe>\n        </div>\n      );\n    }\n\n    if (this.lazyLoad) {\n      return (\n        <div>\n          <presto-video part=\"video\" getRef={this.getRef} src=\"\" provider=\"youtube\"></presto-video>\n          <div class=\"presto-player__play-cover\" onClick={() => this.loadPlayer()}></div>\n        </div>\n      );\n    }\n\n    return <div class=\"plyr__video-embed\" part=\"embed\" ref={this.getRef} data-plyr-provider=\"youtube\" data-plyr-embed-id={this.getId(this.src)}></div>;\n  }\n}\n"]}