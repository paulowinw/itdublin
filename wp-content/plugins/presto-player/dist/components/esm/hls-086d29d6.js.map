{"file":"hls-086d29d6.js","mappings":";;;;AAEK,MAAC,OAAO,GAAG,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK;AACxD,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM,KAAK;AAChD,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;AACrB,MAAM,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,MAAM,IAAI,OAAO,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AAClG,KAAK;AACL;AACA,IAAI,IAAI,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE;AAClC;AACA,MAAM,IAAI,aAAa,GAAG,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAClE;AACA;AACA,MAAM,IAAI,EAAE,EAAE,MAAM,EAAE;AACtB,QAAQ,aAAa,GAAG,IAAI,CAAC;AAC7B,OAAO;AACP;AACA;AACA,MAAM,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC;AAC/B,QAAQ,aAAa;AACrB,OAAO,CAAC,CAAC;AACT,MAAM,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC1B;AACA;AACA,MAAM,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,IAAI,KAAK;AAChE,QAAQ,IAAI,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,aAAa,CAAC,8DAA8D,CAAC,CAAC;AAC7I,QAAQ,IAAI,GAAG,CAAC,gBAAgB,EAAE;AAClC,UAAU,IAAI,CAAC,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACtE,SAAS,MAAM;AACf,UAAU,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;AAClC,SAAS;AACT,OAAO,CAAC,CAAC;AACT;AACA;AACA;AACA;AACA,MAAM,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE;AACvE;AACA,QAAQ,IAAI,kBAAkB,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AAC7D,UAAU,OAAO,CAAC,CAAC,MAAM,CAAC;AAC1B,SAAS,CAAC,CAAC;AACX,QAAQ,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACtC;AACA;AACA,QAAQ,MAAM,UAAU,GAAG,CAAC,kBAAkB,IAAI,EAAE,EAAE,SAAS,CAAC,GAAG,IAAI,GAAG,KAAK,QAAQ,CAAC,MAAM,EAAE,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC;AAChI,QAAQ,GAAG,CAAC,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;AACzD;AACA;AACA,QAAQ,MAAM,CAAC,OAAO,GAAG;AACzB,UAAU,OAAO,EAAE,CAAC;AACpB,UAAU,OAAO,EAAE,kBAAkB;AACrC;AACA,UAAU,MAAM,EAAE,IAAI;AACtB,UAAU,QAAQ,EAAE,UAAU,UAAU,EAAE;AAC1C,YAAY,IAAI,UAAU,KAAK,CAAC,EAAE;AAClC,cAAc,SAAS,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;AAC1C,aAAa,MAAM;AACnB,cAAc,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE,UAAU,EAAE;AACpE,gBAAgB,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;AACjD,kBAAkB,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAG,UAAU,CAAC,CAAC;AACxE,kBAAkB,SAAS,CAAC,YAAY,GAAG,UAAU,CAAC;AACtD,iBAAiB;AACjB,eAAe,CAAC,CAAC;AACjB,aAAa;AACb,WAAW;AACX,SAAS,CAAC;AACV;AACA;AACA,QAAQ,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAClC,QAAQ,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC;AAC/B;AACA;AACA,QAAQ,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC;AACjE,QAAQ,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;AACzB;AACA;AACA,QAAQ,MAAM,SAAS,GAAG,MAAM;AAChC,UAAU,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,UAAU,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAC3C,SAAS,CAAC;AACV,QAAQ,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AACxC;AACA;AACA,QAAQ,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,MAAM;AAC1C;AACA,UAAU,UAAU,CAAC,OAAO,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;AAC1E,SAAS,CAAC,CAAC;AACX;AACA,QAAQ,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;AAC/B,OAAO,CAAC,CAAC;AACT;AACA,MAAM,OAAO;AACb,KAAK,MAAM,IAAI,QAAQ,CAAC,WAAW,CAAC,+BAA+B,CAAC,EAAE;AACtE,MAAM,OAAO,OAAO,CAAC,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;AAChE,KAAK;AACL;AACA,IAAI,OAAO,OAAO,CAAC,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;AAC9D,GAAG,CAAC,CAAC;AACL;;;;","names":[],"sources":["src/components/core/player/functions/hls.js"],"sourcesContent":["import PrestoPlayer from './presto-player';\n\nconst loadHLS = ({ config, selector, src, preload }) => {\n  return new Promise(async (resolve, reject) => {\n    if (!window.Hls) {\n      while (!window.hasOwnProperty('Hls')) await new Promise(resolve => setTimeout(resolve, 50));\n    }\n\n    if (window.Hls.isSupported()) {\n      // should we autoload start\n      let autoStartLoad = !['metadata', 'none'].includes(preload);\n\n      // always autoload in admin for preview\n      if (wp?.blocks) {\n        autoStartLoad = true;\n      }\n\n      // maybe don't auto start load depending on performance parameter\n      var hls = new window.Hls({\n        autoStartLoad,\n      });\n      hls.loadSource(src);\n\n      // update menu container to dynamically display quality\n      hls.on(window.Hls.Events.LEVEL_SWITCHED, (event, data) => {\n        var span = selector.closest('.presto-player__wrapper').querySelector(\".plyr__menu__container [data-plyr='quality'][value='0'] span\");\n        if (hls.autoLevelEnabled) {\n          span.innerHTML = `AUTO (${hls.levels[data.level].height}p)`;\n        } else {\n          span.innerHTML = `AUTO`;\n        }\n      });\n\n      // From the m3u8 playlist, hls parses the manifest and returns\n      // all available video qualities. This is important, in this approach,\n      // we will have one source on the Plyr player.\n      hls.on(window.Hls.Events.MANIFEST_PARSED, function (event, data) {\n        // Transform available levels into an array of integers (height values).\n        var availableQualities = hls.levels.map(function (l) {\n          return l.height;\n        });\n        availableQualities.unshift(0); //prepend 0 to quality array;\n\n        // do start level\n        const startLevel = (availableQualities || []).findIndex(qty => qty === parseInt(window?.prestoPlayer?.hls_start_level));\n        hls.startLevel = startLevel ? startLevel - 1 : 2;\n\n        // Add new qualities to option\n        config.quality = {\n          default: 0,\n          options: availableQualities,\n          // this ensures Plyr to use Hls to update quality level\n          forced: true,\n          onChange: function (newQuality) {\n            if (newQuality === 0) {\n              prestoHLS.currentLevel = -1; //Enable AUTO quality if option.value = 0\n            } else {\n              prestoHLS.levels.forEach(function (level, levelIndex) {\n                if (level.height === newQuality) {\n                  console.log('Found quality match with ' + newQuality);\n                  prestoHLS.currentLevel = levelIndex;\n                }\n              });\n            }\n          },\n        };\n\n        // attach media and make our HLS options available globally\n        hls.attachMedia(selector);\n        window.prestoHLS = hls;\n\n        // Initialize player\n        const player = new PrestoPlayer(selector, { ...config });\n        player.hls = hls;\n\n        // make sure we start loading on the first play\n        const firstPlay = () => {\n          hls.startLoad(-1);\n          player.off('waiting', firstPlay);\n        };\n        player.on('waiting', firstPlay);\n\n        // Handle changing captions\n        player.on('languagechange', () => {\n          // Caption support is still flaky. See: https://github.com/sampotts/plyr/issues/994\n          setTimeout(() => (hls.subtitleTrack = player.currentTrack), 50);\n        });\n\n        return resolve(player);\n      });\n\n      return;\n    } else if (selector.canPlayType('application/vnd.apple.mpegurl')) {\n      return resolve(new PrestoPlayer(selector, { ...config }));\n    }\n\n    return resolve(new PrestoPlayer(selector, { ...config }));\n  });\n};\n\nexport default loadHLS;\n"],"version":3}